syntax = "proto3";
package userAuthorizationEngine_grpc_api;

//~/Programs/protoc-3.13.0-linux-x86_64/bin/protoc  -I ../grpc_api/userAuthorizationEngine_grpc_api --go_out=plugins=grpc:../grpc_api/userAuthorizationEngine_grpc_api ../grpc_api/userAuthorizationEngine_grpc_api/qml_grpc_server.proto
// Parameter used for Empty inputs
message EmptyParameter {
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
}

// Services published by userAuthorization System
// userAuthorization takes requests from end-user and process them
// ***********************
service userAuthorizationGrpcService {

    // Do a user have the correct rights to execute a specific API
    rpc IsUserAuthorized (UserAuthorizationRequest) returns (UserAuthorizationResponse) {
    }


    // Shutdown server in a controlled way
    rpc ShutDownUserAuthorizationServer (EmptyParameter) returns (AckNackResponse) {

    }
}

// *********************************************************************
// Request message with parameters for Boolean Rule engine
message UserAuthorizationRequest {
    string userId = 1; //User id for the user  doing requests
    string companyId = 2; // The Company the user is connected to
    string callingApi = 3; // Which API did the user call
    string account = 4; // If account was in request then place it here
    string accountType = 5; // If account was in request then place it here
}

// Response message from Boolean Rule Engine
message UserAuthorizationResponse {
    bool userIsAllowedToExecuteCallingApi = 1; //User id for the user  doing requests
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; // Comments if needed

}



