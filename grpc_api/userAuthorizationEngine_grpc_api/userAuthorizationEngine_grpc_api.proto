syntax = "proto3";
package userAuthorizationEngine_grpc_api;

//~/Programs/protoc-3.13.0-linux-x86_64/bin/protoc  -I ../grpc_api/userAuthorizationEngine_grpc_api --go_out=plugins=grpc:../grpc_api/userAuthorizationEngine_grpc_api ../grpc_api/userAuthorizationEngine_grpc_api/qml_grpc_server.proto
// Parameter used for Empty inputs
message EmptyParameter {
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
}

// Services published by userAuthorization System
// userAuthorization takes requests from end-user and process them
// ***********************
service userAuthorizationGrpcService {

    // Do a user have the correct rights to execute a specific API
    rpc IsUserAuthorized (UserAuthorizationRequest) returns (UserAuthorizationResponse) {
    }


    // List users authorized accounts
    rpc ListUsersAuthorizedAccounts (UserAuthorizedAccountsRequest) returns (UserAuthorizedAccountsResponse) {
    }

    // List users authorized account types
    rpc ListUsersAuthorizedAccountTypes (UserAuthorizedAccountTypesRequest) returns (UserAuthorizedAccountTypesResponse) {
    }

    // List users authorized companies
    rpc ListUsersAuthorizedCompanies (UserAuthorizedCompaniesRequest) returns (UserAuthorizedCompaniesResponse) {
    }

    // List users authorized rules
    rpc ListUsersAuthorizedRules (UserAuthorizedRulesRequest) returns (UserAuthorizedRulesResponse) {
    }

    // Shutdown server in a controlled way
    rpc ShutDownUserAuthorizationServer (EmptyParameter) returns (AckNackResponse) {

    }
}

// *********************************************************************
// Request message with parameters for Boolean Rule engine
message UserAuthorizationRequest {
    string userId = 1; //User id for the user  doing requests
    string companyId = 2; // The Company the user is connected to
    int32 callingApi = 3; // Which API did the user call
    repeated Account accounts = 4; // List of accounts that comes from users request
    repeated AccountType accountTypes = 5; // List of accounts types that comes from users request
    repeated Company companies = 6; // List of companies that comes from users request

}

// Response message from Boolean Rule Engine
message UserAuthorizationResponse {
    bool userIsAllowedToExecuteCallingApi = 1; //User id for the user  doing requests
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; // Comments if needed

}


// *********************************************************************
// Request message listing users authorized accounts
message UserAuthorizedAccountsRequest {
    string userId = 1; //User id for the user  doing requests
    string companyId = 2; // The Company the user is connected to
}

// Response message listing users authorized accounts
message UserAuthorizedAccountsResponse {
    string userId = 1; //User id for the user  doing requests
    string companyId = 2; // The Company the user is connected to
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; // Comments if needed
    repeated Account accounts = 5; // Accounts that the user has access to
}

//  Holds the account that the user has access to
message Account {
    string account =1; // Account number
}

// *********************************************************************
// Request message listing users authorized account types
message UserAuthorizedAccountTypesRequest {
    string userId = 1; //User id for the user  doing requests
    string companyId = 2; // The Company the user is connected to
}

// Response message listing users authorized account types
message UserAuthorizedAccountTypesResponse {
    string userId = 1; //User id for the user  doing requests
    string companyId = 2; // The Company the user is connected to
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; // Comments if needed
    repeated AccountType accountTypes = 5; // Accounts that the user has access to
}

//  Holds the account type that the user has access to
message AccountType {
    string accountType =1; // Account type
}

// *********************************************************************
// Request message listing users authorized companies
message UserAuthorizedCompaniesRequest {
    string userId = 1; //User id for the user  doing requests
}

// Response message listing users authorized companies
message UserAuthorizedCompaniesResponse {
    string userId = 1; //User id for the user  doing requests
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; // Comments if needed
    repeated Company companies = 5; // Company that the user has access to
}

//  Holds the company type that the user has access to
message Company {
    string company =1; // Company
}

// *********************************************************************
// Request message listing users authorized rules
message UserAuthorizedRulesRequest {
    string userId = 1; //User id for the user  doing requests
}

// Response message listing users authorized companies
message UserAuthorizedRulesResponse {
    string userId = 1; //User id for the user  doing requests
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; // Comments if needed
    repeated Rule rules = 5; // Rules that the user has access to
}

//  Holds the company type that the user has access to
message Rule {
    string rule =1; // Rule
}
