syntax = "proto3";
package secretMessageGenerator_grpc_api;

//~/Programs/protoc-3.13.0-linux-x86_64/bin/protoc  -I ../grpc_api/qml_server_grpc_api --go_out=plugins=grpc:../grpc_api/qml_server_grpc_api ../grpc_api/qml_server_grpc_api/qml_grpc_server.proto
// Parameter used for Empty inputs
message EmptyParameter {
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
}

// Services published by secretMessageGenerator System
// secretMessageGenerator keeps a record of all users and their Aggregated Signatures used for Rule Verification
// ***********************
service secretMessageGeneratorGrpcService {

    // Updates a specifics users aggregated signature
    rpc UpdateUsersAuthorizationSignature (UpdateUserAggregatedSignatureRequest) returns (AckNackResponse) {
    }

    // Reads a specific users aggregated signature
    rpc GetUserAggregatedSignature (GetUserAggregatedSignatureRequest) returns (GetUserAggregatedSignatureResponse) {
    }

    // Shut down server in a controlled way
    rpc ShutDownsecretMessageGeneratorServer (EmptyParameter) returns (AckNackResponse) {

    }
}

// Request message when updating a users authorization signature
message UpdateUserAggregatedSignatureRequest {
    string userId = 1; //User Id
    string userAggregatedSignature = 2; // The Signature used for authorization verification of what Rules a user can execute
}

// Request message when reading a users authorization signature
message GetUserAggregatedSignatureRequest {
    string userId = 1; //User Id
}

// Response message when reading a users authorization Signature
message GetUserAggregatedSignatureResponse {
    string userId = 1; //User Id
    string userAggregatedSignature = 2; // The Signature used for authorization verification of what Rules a user can execute
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; //Comments if needed
}




